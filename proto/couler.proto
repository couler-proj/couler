syntax = "proto3";

package couler.v1;

import "google/protobuf/any.proto";

// declear go package name here, becuase of the generated Go package with `couler_v1` is
// not acceptable for golint. ref: https://developers.google.com/protocol-buffers/docs/reference/go-generated
option go_package = "couler/v1";

message Parameter {
  string name = 1;
  // value can be used in templates and steps
  // in templates: value is how the parameter can be referred to
  // in steps: actual value to be passed to the step
  string value = 2;
}

message Secret {
  string name = 1;
  string key = 2;
  string value = 3;  // BASE64 encoded secret value
}

message Artifact {
  string name = 1;
  // value can be only used steps as the "from" field:
  // https://argoproj.github.io/argo/examples/#artifacts
  string value = 2;
  string type = 3;  // HTTP/GIT/...
  string local_path = 4;
  string remote_path = 5;
  Secret access_key = 6;
  Secret secret_key = 7;
  string endpoint = 8;
  string bucket = 9;
  string global_name = 10;
}

message StdOut {
  string name = 1;
}

message StepIO {
  string name = 1;
  int32 source = 2;
  oneof step_io {
    Parameter parameter = 3;
    Artifact  artifact = 4;
    StdOut stdout = 5;
  }
}

message ContainerSpec {
    string image = 1;
    repeated string command = 2;
    map<string, google.protobuf.Any> env = 3;
}

message ResourceSpec {
    string manifest = 1;
    string success_condition = 2;
    string failure_condition = 3;
    string action = 4;
    bool set_owner_reference = 5;
}

message Step {
  int32 id = 1;
  string name = 2;      // name for reference
  string tmpl_name = 3; // name for generating template
  ContainerSpec container_spec = 4;
  ResourceSpec resource_spec = 5;
  string script = 6;
  repeated StepIO args = 7;
  repeated int32  dependencies = 8;
}

message ConcurrentSteps {
  repeated Step steps = 1;
}

message StepTemplate {
  string name = 1;
  repeated StepIO inputs = 2;
  repeated StepIO outputs = 3;
  // TODO(typhoonzero):
  // add timeout, retry, daemon
}

message Workflow {
  // sequential steps: [ [step], [step], [step], ...]
  // concurrent steps: [ [step], [step, step, step], ...]
  // if dependencies was set, no matter what structure the
  // "steps" field stores, generate a DAG.
  repeated ConcurrentSteps steps = 1;
  map<string, StepTemplate> templates = 2;
  int32 parallelism = 3;
  string secret = 4;
}
