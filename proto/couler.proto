syntax = "proto3";

package couler.v1;

import "google/protobuf/any.proto";

message Parameter {
  string name = 1;
  string value = 2;
}

message Artifact {
  string name = 1;
  string type = 2;  // HTTP/GIT/...
  string value = 3;
}

message StdOut {
  string name = 1;
}

message StepIO {
  string name = 1;
  int32 source = 2;
  oneof step_io {
    Parameter parameter = 3;
    Artifact  artifact = 4;
    StdOut stdout = 5;
  }
}

message ContainerSpec {
    string image = 1;
    repeated string command = 2;
    map<string, google.protobuf.Any> env = 3;
}

message ResourceSpec {
    string manifest = 1;
    string success_condition = 2;
    string failure_condition = 3;
}

message Step {
  int32 id = 1;
  string name = 2;      // name for reference
  string tmpl_name = 3; // name for generating template
  ContainerSpec container_spec = 4;
  ResourceSpec resource_spec = 5;
  string script = 6;
  repeated StepIO inputs = 7;
  repeated StepIO outputs = 8;
  repeated int32  dependencies = 9;
}

message Workflow {
  repeated Step steps = 1;
  int32 parallelism = 2;
  string secret = 3;
}



message Response {
  // SUCCESS or not
  ResponseStatus status = 1;
  // Represent detailed error message if fails.
  string error = 2;
}

enum ResponseStatus {
  SUCCESS = 0;
  ERROR = 1;
  NOT_FOUND = 2;
}

// Request represents a gRPC request which includes
// workflow description and the correlative configuration to
// operate the workflow, e.g. cluster, namespace and workflow name.
message Request {
  Workflow workflow = 1;
  string cluster = 2;
  string namespace = 3;
  string name = 4;
}

service WorkflowService {
  // Submit a workflow
  rpc Submit(Request) returns (Response) {};
  // Pause a workflow
  rpc Pause(Request) returns (Response) {};
  // Resume a workflow
  rpc Resume(Request) returns (Response) {};
  // Stop a workflow
  rpc Stop(Request) returns (Response) {};
  // Delete a workflow
  rpc Delete(Request) returns (Response) {};
}
